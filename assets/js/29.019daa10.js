(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{433:function(e,t,r){"use strict";r.r(t);var o=r(56),l=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"architecture-overview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#architecture-overview"}},[e._v("#")]),e._v(" Architecture Overview")]),e._v(" "),r("p",[e._v("Rxjs is library to manage asynchronous and event-based programs using sequence of "),r("em",[e._v("Observable")]),e._v(".\nThere is one core type "),r("em",[e._v("Observable")]),e._v(" plus operators to allow asynchronous event of collections.")]),e._v(" "),r("p",[e._v("The essensial concepts are:")]),e._v(" "),r("ul",[r("li",[r("em",[e._v("Observable")]),e._v(": invokable collections of futrure values or events.")]),e._v(" "),r("li",[r("em",[e._v("Observer")]),e._v(": collections of callback that liston to value delivered by Observable.")]),e._v(" "),r("li",[r("em",[e._v("Subscription")]),e._v(":  execution of an Observable.")]),e._v(" "),r("li",[r("em",[e._v("Operators")]),e._v(": pure functions to enable functional programming style to handle collections of Observables.")]),e._v(" "),r("li",[r("em",[e._v("Subject")]),e._v(": like an EventEmitter and the only way to multicast a value to multiple Observers.")]),e._v(" "),r("li",[r("em",[e._v("Schedulers")]),e._v(": dispatcher to controll concurrency")])])])}),[],!1,null,null,null);t.default=l.exports}}]);