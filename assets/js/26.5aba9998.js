(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{429:function(e,s,n){"use strict";n.r(s);var a=n(56),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"backpressuring-in-stream"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#backpressuring-in-stream"}},[e._v("#")]),e._v(" Backpressuring in Stream")]),e._v(" "),n("p",[n("code",[e._v("Backpressure")]),e._v(" is a problem that can arise during data handling; when the recieving\nend of the transfer has complex operations, or is slower, then the data from the\nincoming resource is accomulated.  This can :")]),e._v(" "),n("ul",[n("li",[e._v("slowing down all current process")]),e._v(" "),n("li",[e._v("overwork garbage collector")]),e._v(" "),n("li",[e._v("exhaust memory")])]),e._v(" "),n("p",[e._v("To solve this problem the system must ensure a smooth flow of data from one source to another.\nIn nodejs the mechanism to transfer data is called "),n("code",[e._v("Stream")]),e._v(" that internally implements\n"),n("code",[e._v("backpressure")]),e._v(". The backpressure optimization start when the "),n("code",[e._v("Writables")]),e._v("'s "),n("code",[e._v("write")]),e._v("\nfunction return ‘false’, this can happen when the data buffer has exceeded the\n"),n("code",[e._v("highWaterMark")]),e._v(" or the write queque is busy.\nWhen "),n("code",[e._v("false")]),e._v(" is returned the backpressure mechanism kicks in, and the "),n("code",[e._v("Readable")]),e._v("\nstream pause from sending data and wait untill the consumer is ready. One the buffer\ndata is emptied, a "),n("code",[e._v("drain")]),e._v(" event will be emitted and resume the data flow.")]),e._v(" "),n("p",[e._v("Example of "),n("code",[e._v("pipe")]),e._v(" method that implements backpressure")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("                                                     +===================+\n                         x--\x3e  Piping functions   +--\x3e   src.pipe(dest)  |\n                         x     are set up during     |===================|\n                         x     the .pipe method.     |  Event callbacks  |\n+===============+        x                           |-------------------|\n|   Your Data   |        x     They exist outside    | .on('close', cb)  |\n+=======+=======+        x     the data flow, but    | .on('data', cb)   |\n        |                x     importantly attach    | .on('drain', cb)  |\n        |                x     events, and their     | .on('unpipe', cb) |\n+--------v----------+    x     respective callbacks. | .on('error', cb)  |\n|  Readable Stream  +----+                           | .on('finish', cb) |\n+-^-------^-------^-+    |                           | .on('end', cb)    |\n^       |       ^      |                             +-------------------+\n|       |       |      |\n|       ^       |      |\n^       ^       ^      |    +-------------------+         +=================+\n^       |       ^      +----\x3e  Writable Stream  +---------\x3e  .write(chunk)  |\n|       |       |           +-------------------+         +=======+=========+\n|       |       |                                                 |\n|       ^       |                              +------------------v---------+\n^       |       +-> if (!chunk)                |    Is this chunk too big?  |\n^       |       |     emit .end();             |    Is the queue busy?      |\n|       |       +-> else                       +-------+----------------+---+\n|       ^       |     emit .write();                   |                |\n|       ^       ^                                   +--v---+        +---v---+\n|       |       ^-----------------------------------<  No  |        |  Yes  |\n^       |                                           +------+        +---v---+\n^       |                                                               |\n|       ^               emit .pause();          +=================+     |\n|       ^---------------^-----------------------+  return false;  <-----+---+\n|                                               +=================+         |\n|                                                                           |\n^            when queue is empty     +============+                         |\n^------------^-----------------------<  Buffering |                         |\n             |                       |============|                         |\n             +> emit .drain();       |  ^Buffer^  |                         |\n             +> emit .resume();      +------------+                         |\n                                     |  ^Buffer^  |                         |\n                                     +------------+   add chunk to queue    |\n                                     |            <---^---------------------<\n                                     +============+\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br")])]),n("p",[e._v("When creating custom "),n("code",[e._v("Stream")]),e._v(" we shuold respect backpressure and")]),e._v(" "),n("p",[e._v(". Never call "),n("code",[e._v("push")]),e._v(" if is not asked\n. Stop reading from stream source if "),n("code",[e._v("push")]),e._v(" return "),n("code",[e._v("false")]),e._v("\n. Never call "),n("code",[e._v("write")]),e._v(" after it return false, but wait for drain.")])])}),[],!1,null,null,null);s.default=t.exports}}]);